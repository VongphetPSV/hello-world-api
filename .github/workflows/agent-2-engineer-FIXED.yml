name: Agent 2 - Engineer

on:
  repository_dispatch:
    types: [agent-2-execute]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  implement:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout planning branch
        uses: actions/checkout@v4
        with:
          ref: planning/${{ github.event.client_payload.issue_number }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Dependencies
        run: |
          if [ -f package.json ]; then
            npm install
          else
            npm init -y
            npm install express
          fi
          
      - name: Install Claude Code
        run: npm install -g @anthropic-ai/claude-code
        
      - name: Implement Features
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          ISSUE_NUM="${{ github.event.client_payload.issue_number }}"
          
          # Verify plans exist
          if [ ! -f "plans/${ISSUE_NUM}/architecture.md" ]; then
            echo "ERROR: Architecture plan not found!"
            exit 1
          fi
          
          # Create implementation prompt
          cat << 'ENDFILE' > /tmp/agent2-prompt.txt
          You are Agent 2: The Engineer - Expert implementer.
          
          MISSION: Implement feature following architecture plan for Issue #${ISSUE_NUM}
          
          ARCHITECTURE PLAN:
          $(cat plans/${ISSUE_NUM}/architecture.md)
          
          IMPLEMENTATION GUIDE:
          $(cat plans/${ISSUE_NUM}/implementation.md)
          
          TEST REQUIREMENTS:
          $(cat plans/${ISSUE_NUM}/test-plan.md)
          
          YOUR TASKS:
          
          1. CODE IMPLEMENTATION
             - Follow the plan exactly
             - Write clean, readable code
             - Add inline comments for complex logic
             - Use consistent style
          
          2. TESTING
             - Write all specified unit tests
             - Add integration tests
             - Achieve >80% coverage
             - Test edge cases
          
          3. DOCUMENTATION
             - Update README if needed
             - Document new APIs
             - Add code comments
          
          QUALITY STANDARDS:
          - All tests must pass
          - No console.log or debug code
          - Proper error handling
          - Type-safe where applicable
          
          EXECUTION PRINCIPLES:
          - Move fast but maintain quality
          - Test everything
          - Document as you go
          
          SELF-CHECK BEFORE COMPLETING:
          - [ ] All features implemented
          - [ ] Tests written and passing
          - [ ] No debug code left
          - [ ] Documentation updated
          
          OUTPUT: Production-ready code with tests.
          ENDFILE
          
          # Run Claude Code
          claude-code "$(cat /tmp/agent2-prompt.txt)"
          
      - name: Run Tests
        run: |
          # Add test script if it doesn't exist
          if ! grep -q '"test"' package.json; then
            npm pkg set scripts.test="echo 'Tests will be added by Agent 2'"
          fi
          npm test || echo "Tests not yet fully configured"
          
      - name: Commit Implementation
        run: |
          git config user.name "agent-2-engineer[bot]"
          git config user.email "agent-2@actions.github.com"
          git checkout -b feature/${{ github.event.client_payload.issue_number }}
          git add .
          git commit -m "âœ¨ Implement #${{ github.event.client_payload.issue_number }}"
          git push origin feature/${{ github.event.client_payload.issue_number }}
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: feature/${{ github.event.client_payload.issue_number }}
          base: main
          title: "[Agent-2] ${{ github.event.client_payload.issue_title }}"
          body: |
            ## ðŸ¤– Agent 2 Implementation
            
            Implementation for issue #${{ github.event.client_payload.issue_number }}
            
            ### Changes Made
            - Implemented features according to architecture plan
            - Added comprehensive tests
            - Updated documentation
            
            ### Quality Checks
            - [x] All features implemented
            - [x] Tests written
            - [x] Documentation updated
            
            **Status**: Ready for Agent 3 QA validation
          labels: agent-qa-ready
          
      - name: Comment on Issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ github.event.client_payload.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… **Agent 2: Implementation Complete**
              
              Pull request created and ready for Agent 3 QA review.
              
              Branch: \`feature/${{ github.event.client_payload.issue_number }}\``
            });
