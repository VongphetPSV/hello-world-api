name: Agent 2 - Engineer

on:
  repository_dispatch:
    types: [agent-2-execute]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  implement:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout planning branch
        uses: actions/checkout@v4
        with:
          ref: planning/${{ github.event.client_payload.issue_number }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install Dependencies
        run: |
          if [ -f package.json ]; then
            npm install
          fi
        
      - name: Install Claude Code
        run: npm install -g @anthropic-ai/claude-code
        
      - name: Implement Feature
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          ISSUE_NUM=${{ github.event.client_payload.issue_number }}
          
          # Create implementation prompt
          cat > /tmp/engineer-prompt.txt << 'ENGINEER_PROMPT'
          You are Agent 2: The Engineer - Expert implementer and clean code practitioner.
          
          MISSION: Implement the feature following the architecture plan EXACTLY.
          
          ARCHITECTURE PLAN:
          $(cat plans/${ISSUE_NUM}/architecture.md)
          
          IMPLEMENTATION GUIDE:
          $(cat plans/${ISSUE_NUM}/implementation.md)
          
          TEST REQUIREMENTS:
          $(cat plans/${ISSUE_NUM}/test-plan.md)
          
          YOUR TASKS:
          
          1. CODE IMPLEMENTATION
             - Follow the architecture plan precisely
             - Create all specified files
             - Write clean, readable code
             - Add inline comments for complex logic
             - Use consistent code style
             - Implement proper error handling
          
          2. TESTING
             - Write all unit tests specified in test-plan.md
             - Add integration tests
             - Test all edge cases
             - Ensure >90% code coverage
             - Make tests clear and maintainable
          
          3. DOCUMENTATION
             - Add JSDoc comments to functions
             - Update README if needed
             - Document API endpoints
             - Include usage examples
          
          QUALITY STANDARDS:
          - Code must be production-ready
          - All tests must pass
          - No console.log or debug code
          - Proper error handling everywhere
          - Follow Node.js best practices
          
          EXECUTION PRINCIPLES:
          - Move fast but maintain quality (Musk speed, Jobs quality)
          - Test everything (Amodei safety)
          - Keep it simple (Gates clarity)
          
          SELF-CHECK BEFORE COMPLETING:
          - [ ] All features from plan implemented
          - [ ] All tests written and passing
          - [ ] Code is clean and documented
          - [ ] No debug code left behind
          - [ ] README updated
          
          Implement the feature now. Create all necessary files.
          ENGINEER_PROMPT
          
          # Replace variable in prompt
          sed -i "s/\${ISSUE_NUM}/$ISSUE_NUM/g" /tmp/engineer-prompt.txt
          
          # Execute implementation
          claude-code "$(cat /tmp/engineer-prompt.txt)"
          
      - name: Install Project Dependencies
        run: |
          if [ -f package.json ]; then
            npm install
          fi
          
      - name: Run Linting
        run: |
          if grep -q '"lint"' package.json; then
            npm run lint || echo "‚ö†Ô∏è Linting issues found (non-blocking)"
          fi
          
      - name: Run Tests
        run: |
          if grep -q '"test"' package.json; then
            npm test
          else
            echo "‚ö†Ô∏è No tests configured"
          fi
          
      - name: Validate Implementation
        run: |
          echo "üìä Implementation Validation:"
          
          # Check source files exist
          if [ -d "src" ] && [ "$(ls -A src)" ]; then
            echo "‚úÖ Source code created"
          else
            echo "‚ùå No source code found"
            exit 1
          fi
          
          # Check tests exist
          if [ -d "tests" ] && [ "$(ls -A tests)" ]; then
            echo "‚úÖ Tests created"
          else
            echo "‚ö†Ô∏è No tests found"
          fi
          
          # Check coverage
          if [ -d "coverage" ]; then
            echo "‚úÖ Coverage report generated"
          fi
          
      - name: Commit Implementation
        run: |
          ISSUE_NUM=${{ github.event.client_payload.issue_number }}
          
          git config user.name "Agent-2-Engineer"
          git config user.email "engineer@agents.local"
          
          # Create feature branch from planning branch
          git checkout -b feature/$ISSUE_NUM
          
          git add .
          git commit -m "‚ú® Implement feature for #$ISSUE_NUM
          
          - Complete implementation following architecture plan
          - Comprehensive test suite included
          - Documentation updated
          - All quality checks passing
          
          Ready for QA validation." || echo "No changes to commit"
          
          git push origin feature/$ISSUE_NUM
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        id: create-pr
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: feature/${{ github.event.client_payload.issue_number }}
          base: main
          title: "[Agent-2] Feature Implementation #${{ github.event.client_payload.issue_number }}"
          body: |
            ## ü§ñ Agent 2: Implementation Complete
            
            Closes #${{ github.event.client_payload.issue_number }}
            
            ### What was implemented:
            - Complete feature implementation following architecture plan
            - Comprehensive test suite
            - Documentation and code comments
            - All quality checks passing
            
            ### Quality Metrics:
            - ‚úÖ Tests: Passing
            - ‚úÖ Linting: Clean
            - ‚úÖ Coverage: >90% (target)
            - ‚úÖ Documentation: Complete
            
            ### Next Step:
            Agent 3 will now perform comprehensive QA validation.
            
            ---
            
            **Architecture Plan:** `plans/${{ github.event.client_payload.issue_number }}/`
            **Branch:** `feature/${{ github.event.client_payload.issue_number }}`
          labels: agent-qa-ready
          
      - name: Comment on Issue
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = ${{ github.event.client_payload.issue_number }};
            
            github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ‚ú® Agent 2: Implementation Complete
              
              I've implemented the feature following the architecture plan.
              
              **Deliverables:**
              - ‚úÖ Source code implemented
              - ‚úÖ Tests written and passing
              - ‚úÖ Documentation updated
              - ‚úÖ Quality checks passing
              
              **Pull Request:** #\${context.payload.pull_request?.number || 'creating...'}
              **Branch:** \`feature/${issueNumber}\`
              
              **Next Step:** Agent 3 will now validate quality.
              
              ‚è±Ô∏è Estimated QA time: 15-20 minutes`
            });
