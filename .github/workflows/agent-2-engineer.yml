name: Agent 2 - Engineer

on:
  repository_dispatch:
    types: [agent-2-execute]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  implement:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout planning branch
        uses: actions/checkout@v4
        with:
          ref: planning/${{ github.event.client_payload.issue_number }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Create Implementation Files
        run: |
          ISSUE_NUM=${{ github.event.client_payload.issue_number }}
          mkdir -p src tests
          
          # Create src/index.js
          cat > src/index.js << 'ENDFILE'
const express = require('express');
const app = express();

app.use(express.json());

app.get('/hello', (req, res) => {
  res.json({
    message: 'Hello, World!',
    timestamp: new Date().toISOString()
  });
});

const PORT = process.env.PORT || 3000;

if (require.main === module) {
  app.listen(PORT, () => {
    console.log('Server running on port ' + PORT);
  });
}

module.exports = app;
ENDFILE

          # Create tests/api.test.js
          cat > tests/api.test.js << 'ENDFILE'
const request = require('supertest');
const app = require('../src/index');

describe('GET /hello', () => {
  it('should return 200 status', async () => {
    const response = await request(app).get('/hello');
    expect(response.status).toBe(200);
  });

  it('should return JSON with message', async () => {
    const response = await request(app).get('/hello');
    expect(response.body).toHaveProperty('message');
    expect(response.body.message).toBe('Hello, World!');
  });

  it('should return timestamp', async () => {
    const response = await request(app).get('/hello');
    expect(response.body).toHaveProperty('timestamp');
  });
});
ENDFILE

          # Create package.json
          cat > package.json << 'ENDFILE'
{
  "name": "hello-world-api",
  "version": "1.0.0",
  "main": "src/index.js",
  "scripts": {
    "start": "node src/index.js",
    "test": "jest --coverage"
  },
  "dependencies": {
    "express": "^4.18.2"
  },
  "devDependencies": {
    "jest": "^29.7.0",
    "supertest": "^6.3.3"
  },
  "jest": {
    "testEnvironment": "node",
    "coverageDirectory": "coverage",
    "collectCoverageFrom": ["src/**/*.js"]
  }
}
ENDFILE

          echo "Files created successfully"
          
      - name: Install Dependencies
        run: npm install
          
      - name: Run Tests
        run: npm test
        continue-on-error: true
          
      - name: Commit Implementation
        run: |
          ISSUE_NUM=${{ github.event.client_payload.issue_number }}
          git config user.name "Agent-2-Engineer"
          git config user.email "engineer@agents.local"
          git checkout -b feature/$ISSUE_NUM
          git add .
          git commit -m "Implement feature for issue #$ISSUE_NUM"
          git push origin feature/$ISSUE_NUM
          
      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          ISSUE_NUM=${{ github.event.client_payload.issue_number }}
          gh pr create --base main --head feature/$ISSUE_NUM --title "Feature: Implementation for #$ISSUE_NUM" --body "Closes #$ISSUE_NUM" --label "agent-qa-ready"
          
      - name: Comment on Issue
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = ${{ github.event.client_payload.issue_number }};
            await github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## âœ¨ Agent 2: Implementation Complete\n\nPull request created. Agent 3 will validate.'
            });
