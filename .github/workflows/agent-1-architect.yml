name: Agent 1 - Architect

on:
  issues:
    types: [labeled]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  plan:
    if: github.event.label.name == 'agent-develop'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Check ANTHROPIC_API_KEY exists
        run: |
          if [ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "ERROR: ANTHROPIC_API_KEY secret is not set"
            echo "Go to: Settings > Secrets and variables > Actions > New repository secret"
            exit 1
          fi
          echo "API key is configured"
      
      - name: Create Plans Directory
        run: |
          ISSUE_NUM=${{ github.event.issue.number }}
          mkdir -p plans/$ISSUE_NUM
          echo "Created plans directory for issue #$ISSUE_NUM"
      
      - name: Create Simple Architecture Plan
        run: |
          ISSUE_NUM=${{ github.event.issue.number }}
          
          cat > plans/$ISSUE_NUM/architecture.md << 'ARCHEOF'
# Architecture Plan

## Requirements
${{ github.event.issue.body }}

## System Design
- Framework: Express.js
- API Endpoint: GET /hello
- Response: JSON with message and timestamp
- Testing: Jest + Supertest
- Coverage Target: >90%

## Technology Stack
- Node.js 20
- Express.js 4.x
- Jest for testing
- Supertest for API testing

## Security
- Input validation
- CORS enabled
- Helmet.js for security headers

## Performance
- Response time: <100ms
- Async/await for I/O
ARCHEOF

          cat > plans/$ISSUE_NUM/implementation.md << 'IMPLEOF'
# Implementation Guide

## Step 1: Dependencies
```json
{
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "helmet": "^7.0.0"
  },
  "devDependencies": {
    "jest": "^29.7.0",
    "supertest": "^6.3.3"
  }
}
```

## Step 2: Create src/index.js
- Initialize Express app
- Add middleware (cors, helmet, json)
- Create GET /hello endpoint
- Return JSON response with message and timestamp
- Export app for testing

## Step 3: Create server.js
- Import app from src/index.js
- Start server on port 3000

## Step 4: Tests
- Create tests/api.test.js
- Test GET /hello endpoint
- Verify response format
- Check status code
IMPLEOF

          cat > plans/$ISSUE_NUM/test-plan.md << 'TESTEOF'
# Test Plan

## Unit Tests
1. Test /hello endpoint returns 200
2. Test response has correct JSON structure
3. Test response has message field
4. Test response has timestamp field
5. Test timestamp is valid ISO format

## Integration Tests
1. Test server starts successfully
2. Test endpoint is accessible
3. Test CORS headers present
4. Test security headers present

## Coverage Target
- Lines: >90%
- Functions: >90%
- Branches: >90%

## Edge Cases
- Invalid routes return 404
- Server handles errors gracefully
TESTEOF

          echo "Plans created successfully"
          ls -la plans/$ISSUE_NUM/
      
      - name: Commit Plans
        run: |
          ISSUE_NUM=${{ github.event.issue.number }}

          git config user.name "Agent-1-Architect"
          git config user.email "architect@agents.local"

          git checkout -b planning/$ISSUE_NUM
          git add plans/$ISSUE_NUM/
          git commit -m "Architecture plan for issue #$ISSUE_NUM"
          git push -u origin planning/$ISSUE_NUM
          
      - name: Comment on Issue
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue.number;
            
            await github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## üèóÔ∏è Agent 1: Architecture Complete\n\nPlans created in `plans/' + issueNumber + '/`\n\n- ‚úÖ architecture.md\n- ‚úÖ implementation.md\n- ‚úÖ test-plan.md\n\n**Next:** Agent 2 will implement the feature.'
            });
          
      - name: Trigger Agent 2
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: agent-2-execute
          client-payload: '{"issue_number": "${{ github.event.issue.number }}"}'
