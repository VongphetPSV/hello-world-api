name: Agent 1 - Architect

on:
  issues:
    types: [labeled]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  plan:
    if: github.event.label.name == 'agent-develop'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code
        run: npm install -g @anthropic-ai/claude-code
        
      - name: Create Architecture Plan
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          ISSUE_NUM="${{ github.event.issue.number }}"
          mkdir -p plans/${ISSUE_NUM}
          
          # Save requirements
          echo "${{ github.event.issue.body }}" > plans/${ISSUE_NUM}/requirements.txt
          
          # Generate architecture plan
          cat << 'ENDFILE' > /tmp/agent1-prompt.txt
          You are Agent 1: The Architect - Expert in system design.
          
          MISSION: Create comprehensive architecture plan for Issue #${ISSUE_NUM}
          
          REQUIREMENTS:
          $(cat plans/${ISSUE_NUM}/requirements.txt)
          
          PROJECT CONTEXT:
          - Type: Hello World API
          - Stack: Node.js, Express
          - Goal: Complete 3-agent workflow test
          
          DELIVERABLES:
          
          Create these files in plans/${ISSUE_NUM}/:
          
          1. architecture.md
             - System design overview
             - Component architecture
             - API endpoints specification
             - Data flow diagram (text-based)
             - Technology decisions
             - Security considerations
          
          2. implementation.md
             - Step-by-step implementation guide
             - File structure to create
             - Dependencies to install
             - Code examples for key components
             - Integration points
          
          3. test-plan.md
             - Unit test specifications
             - Integration test scenarios
             - Edge cases to cover
             - Success criteria
          
          CONSTRAINTS:
          - Must be implementable by Agent 2 without clarification
          - All edge cases identified
          - Clear, actionable steps
          - Production-ready design
          
          OUTPUT: Create all three markdown files with comprehensive details.
          ENDFILE
          
          # Run Claude Code
          claude-code "$(cat /tmp/agent1-prompt.txt)"
          
      - name: Commit Plans
        run: |
          git config user.name "agent-1-architect[bot]"
          git config user.email "agent-1@actions.github.com"
          git checkout -b planning/${{ github.event.issue.number }}
          git add plans/
          git commit -m "üó∫Ô∏è Architecture plan for #${{ github.event.issue.number }}"
          git push origin planning/${{ github.event.issue.number }}
          
      - name: Comment on Issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚úÖ **Agent 1: Architecture Complete**
              
              Plans created in \`plans/${{ github.event.issue.number }}/\`
              
              Next: Agent 2 will implement.`
            });
          
      - name: Trigger Agent 2
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: agent-2-execute
          client-payload: |
            {
              "issue_number": "${{ github.event.issue.number }}",
              "issue_title": "${{ github.event.issue.title }}",
              "planning_branch": "planning/${{ github.event.issue.number }}"
            }